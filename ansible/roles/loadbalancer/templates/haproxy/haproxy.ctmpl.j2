global
    ulimit-n 200000
    maxconn 500000
    maxconnrate 500000
    maxcomprate 0
    maxcompcpuusage 100
    maxsessrate 500000
    nbproc 1
    nbthread {{ ansible_processor_vcpus -1 }}
    cpu-map auto:1/1-{{ ansible_processor_vcpus -1 }} 0-{{ ansible_processor_vcpus -2}}
    # TCP and Request Bufferfing
    tune.bufsize 262144
    tune.chksize 262144
    tune.rcvbuf.client 262144
    tune.rcvbuf.server 2097152
    tune.sndbuf.client 2097152
    tune.sndbuf.server 262144

    # cors responder
    lua-load /etc/haproxy/cors.lua

    chroot  /usr/share/haproxy
    pidfile /run/haproxy.pid
    user    haproxy
    group   haproxy
    # stats sockets
    stats socket /var/run/haproxy/stats_1.sock level operator group telegraf mode 0770 process 1
    daemon
    log     /dev/log local0 notice
    # tls
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ca-base /etc/ssl/certs

defaults
    log     global
    maxconn 500000
    mode    http
    # enable some useful options
    option  socket-stats
    option  httplog
    option  dontlognull
    option  http-server-close
    option  abortonclose
    # configure timeouts
    timeout http-request 5s # avoid slowloris
    timeout connect 5s
    timeout server  10s
    timeout client  30s
    # constum error filter
    errorfile 500 /var/lib/haproxy/500.http
    errorfile 502 /var/lib/haproxy/502.http
    errorfile 503 /var/lib/haproxy/503.http
    log     /dev/log local0 notice

frontend icecast_and_nginx_hls_http
    bind 0.0.0.0:80
    bind :::80

    # add special header for protocol version
    http-request add-header X-Proto http  if !{ ssl_fc }

{% macro frontend_acls(proto, ssl) -%}
    # tag request for the right destination server
    acl stream_file          path_end   -i .m3u8 .mpd .webm .m4s .ts .jpeg
    acl stream_path          path_dir   -i dash hls thumbnail
    acl is_relive            path_sub   -i index.json thumb.jpg sprites.jpg crossdomain.xml .mp4 relive
    acl is_stats             path_beg   -i /stats
    acl icecast              path_end   -i .webm .opus .mp3 .ogg .ogv .oga
    acl is_cdn               hdr_beg(host)  -i cdn.c3voc.de
    acl is_streaming_website hdr_beg(host)  -i streaming.media.ccc.de -i www.stream.c3voc.de
    acl is_streaming_website path_end   -i logo.webm
    acl is_streaming_website path_sub   -i acme-challenge
{% if haproxy_3rdparty_regex is defined %}
    acl is_3rdparty          path_reg   -i {{ haproxy_3rdparty_regex }}
{% endif %}

    # ip address matching
    acl is_local             src        94.45.224.0/19 151.217.0.0/17 2001:67c:20a1::/48 # 37c3

{% if haproxy_dtag_extrawurst is defined and haproxy_dtag_extrawurst|bool %}
    # dtag address matching
    acl is_dtag              src        -f /etc/haproxy/dtag_subnetworks.txt
{% endif %}

    # return 403 if hostname or defined file extensions are not matching
    http-request deny        unless is_cdn or is_streaming_website
    http-request deny        unless stream_file or icecast or is_streaming_website or is_relive or is_stats

    ##
    # Backend usage
    ##
{% if ssl == "" %}
    # Redirect to https
    redirect scheme https code 301      if is_streaming_website {{ ssl }}
    redirect scheme https code 301      if is_relive {{ ssl }}
{% else %}
    http-request use-service lua.cors-response if METH_OPTIONS { req.hdr(origin) -m found } { ssl_fc }
    use_backend streaming_website_https if is_streaming_website {{ ssl }}
    use_backend relive_https            if is_relive {{ ssl }}
{% endif %}

{% if haproxy_3rdparty_regex is defined %}
    # 3rd party streams
    use_backend 3rdparty_{{ proto }}    if is_3rdparty stream_path stream_file {{ ssl }}
    use_backend 3rdparty_{{ proto }}    if is_3rdparty icecast {{ ssl }}
{% endif %}

[[- $numLocalHttp := service "local.http-relay" | len ]]
[[- if gt $numLocalHttp 0 ]]
[[- $numLocalHttps := service "local.https-relay" | len ]]
[[- if gt $numLocalHttps 0 ]]
    # local relay
    use_backend local_{{ proto }}       if is_local stream_path stream_file {{ ssl }}
    use_backend local_{{ proto }}       if is_local icecast {{ ssl }}
[[- end ]]
[[- end ]]

{% if haproxy_dtag_extrawurst is defined and haproxy_dtag_extrawurst|bool %}
    # dtag relay
    use_backend dtag_{{ proto }}        if is_dtag stream_path stream_file {{ ssl }}
    use_backend dtag_{{ proto }}        if is_dtag icecast {{ ssl }}
{% endif %}

    # use remote relays
    use_backend nginx_{{ proto }}       if stream_path stream_file {{ ssl }}
    use_backend icecast_{{ proto }}     if icecast {{ ssl }}
    use_backend stats_{{ proto }}       if is_stats {{ ssl }}
{%- endmacro %}
    {{ frontend_acls("http", "") }}

frontend icecast_and_nginx_hls_https
    bind 0.0.0.0:443 ssl crt /etc/letsencrypt/live/streaming.media.ccc.de/haproxy.pem crt /etc/letsencrypt/live/cdn.c3voc.de/haproxy.pem # <cert+privkey+intermediate+dhparam>
    bind :::443 ssl crt /etc/letsencrypt/live/streaming.media.ccc.de/haproxy.pem crt /etc/letsencrypt/live/cdn.c3voc.de/haproxy.pem # <cert+privkey+intermediate+dhparam>

    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    stick-table type ip size 200k expire 1m store conn_rate(10s)
    tcp-request content track-sc0 src
    acl conn_rate_abuse sc0_conn_rate gt 50
    tcp-request content reject if conn_rate_abuse

    # add special header for protocol version
    http-request add-header X-Proto https if  { ssl_fc }
    # HSTS
    http-response set-header Strict-Transport-Security "max-age=31536000" if  { ssl_fc }

    {{ frontend_acls("https", "{ ssl_fc }") }}


# enable statistics and basic admin support for localhost
{% for nr in range(1, haproxy_nbproc+1) %}
listen stats_process_{{ nr }}
    bind 127.0.0.1:910{{ nr }}
    mode http
    stats enable
    stats uri     /admin?stats
    stats refresh 10s
    stats admin   if LOCALHOST

{% endfor %}

# ######## #
# BACKENDs #
# ######## #

# Streaming Website
backend streaming_website_https
    balance source
    option forwardfor
    http-request set-header X-Custom-Header %[url]
    http-request set-header X-Real-IP %[src]
    server localhost 127.0.0.1:8080 maxconn 500000


## Templated by consul-template ##
{% for protocol in ["http", "https"] %}

# {{ protocol }}
# REMOTE
backend nginx_{{ protocol }}
    balance source
    option forwardfor

[[- $services{{ protocol }} := service "edge.{{ protocol }}-relay" ]]
[[- range $services{{ protocol }} ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]

backend relive_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "relive" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]


backend icecast_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "icecast" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]

# 3rd party
backend 3rdparty_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "thirdparty" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]


# LOCAL
backend local_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "local" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]


{% if haproxy_dtag_extrawurst is defined and haproxy_dtag_extrawurst|bool %}
# DTAG EXTRAWURST
backend dtag_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "dtag" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]][[ end ]]
{% endif %}

# stats
backend stats_{{ protocol }}
    balance source
    option forwardfor
[[- range $services{{ protocol }} ]]
    [[- if in .Tags "stats" | not ]]
        [[- continue ]]
    [[- end ]]
    [[- $name := .Node | replaceAll "-" "." ]]
    [[- $key := printf "services/haproxy/backends/%s/weight" $name ]]
    [[- $weight := keyOrDefault $key "100" ]]
    server [[ $name ]] [[ $name ]]:[[ .Port ]] redir {{ protocol }}://[[ $name ]]:[[ .Port ]]  weight [[ $weight ]] check port [[ .Port ]] {% if protocol == "https" %}ssl ca-file ISRG_Root_X1.pem{% endif %}[[ end ]]


{% endfor %}