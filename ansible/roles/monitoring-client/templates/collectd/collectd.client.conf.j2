# Config file for collectd(1).
#
# Some plugins need additional configuration and are disabled by default.
# Please read collectd.conf(5) for details.
#
# You should also read /usr/share/doc/collectd-core/README.Debian.plugins
# before enabling any more plugins.

Hostname "{{ inventory_hostname }}"
Interval {{ monitoring.collectd_interval | default('30') }}
TypesDB "/usr/share/collectd/types.db"
TypesDB "/opt/voc/collectd/types.db"

LoadPlugin cpu
LoadPlugin df
LoadPlugin disk
LoadPlugin interface
LoadPlugin load
LoadPlugin memory
LoadPlugin network
LoadPlugin swap
LoadPlugin tcpconns
LoadPlugin curl_json
{% if ansible_hostname is match('router')  %}
LoadPlugin conntrack
{% endif %}
{% if nginx is defined and nginx == 'yes' %}
LoadPlugin nginx
{% endif %}
{% if ansible_hostname is match('mixer\d+')  %}
LoadPlugin snmp
{% endif %}
{% if ansible_virtualization_role is match('host') %}
LoadPlugin ipmi
{% endif %}


<LoadPlugin perl>
  Globals true
</LoadPlugin>

<Plugin "logfile">
  LogLevel "info"
  File "/var/log/collectd.log"
  Timestamp true
</Plugin>

<Plugin interface>
  # collect all interface data!!1!
</Plugin>

<Plugin network>
  # client setup:
{% for server_ip in monitoring.collectd_server %}
  <Server "{{ server_ip }}" "{{ monitoring.collectd_port | default('25826') }}">
    SecurityLevel Encrypt
    Username "{{ monitoring.collectd_username }}"
    Password "{{ monitoring.collectd_password }}"
  </Server>
{% endfor %}

  MaxPacketSize 1024
  TimeToLive 128
</Plugin>

<LoadPlugin perl>
  Globals true
</LoadPlugin>
<Plugin perl>
  IncludeDir "/opt/voc/collectd/plugins/"
  BaseName "Collectd::Plugins"

{% if icecast is defined and icecast == 'yes' and inventory_hostname in groups['relays'] %}
  # include icecast perl plugin
  LoadPlugin Icecast2
{% endif %}
</Plugin>

<LoadPlugin python>
  Globals true
</LoadPlugin>
<Plugin python>
  ModulePath "/opt/voc/collectd/plugins/"
  LogTraces true
{% if haproxy is defined and haproxy == 'yes' %}
  Import "haproxy"
  <Module haproxy>
{% for i in  range(1, haproxy_nbproc+1) %}
    Socket "/var/run/haproxy_stats_{{ i }}.sock"
{% endfor %}
  </Module>

{% endif %}
{%  if nginx is defined and nginx == 'yes' and inventory_hostname in groups['relays'] %}
  Import NginxHls
  Import NginxDash
{% endif %}
{% if transcoder_streams is defined or transcoding_lounge is defined %}
  Import "TranscodingUnits"
  <Module TranscodingUnits>
    UnitRegex "transcode_(h264|vpx|audio)@[a-zA-Z0-9]+\.service" 
  </Module>
{% endif %}
</Plugin>

{% if ansible_virtualization_role == 'host' and libvirtd_bin.stdout != '' %}
LoadPlugin libvirt
<Plugin "libvirt">
  Connection "qemu:///system"
  RefreshInterval 7200
  HostnameFormat "uuid"
</Plugin>
{% endif %}

{% if php is defined and php == 'yes' %}
LoadPlugin curl_json
<Plugin curl_json>
  <URL "http://127.0.0.1:8999/stats/php?json">
    Instance "fpm"
    <Key "accepted conn">
        Type "http_requests"
    </Key>
    <Key "listen queue len">
        Type "listen_queue"
    </Key>
    <Key "active processes">
        Type "active_processes"
    </Key>
    <Key "total processes">
        Type "total_processes"
    </Key>
  </URL>
</Plugin>
{% endif %}

{% if nginx is defined and nginx == 'yes' and php is defined and php == 'yes' %}
LoadPlugin dbi
<Plugin dbi>
  <Query "streaming_issues">
    Statement "SELECT COUNT(*) AS value FROM feedback;"
    <Result>
      Type "counter"
      ValuesFrom "value"
    </Result>
  </Query>
  <Database "feedback">
    Driver "sqlite3"
    DriverOption "sqlite3_dbdir" "/opt/streaming-feedback/"
    DriverOption "dbname" "feedback.sqlite3"
    Query "streaming_issues"
  </Database>
</Plugin>
{% endif %}

{% if nginx is defined and nginx == 'yes' %}
<Plugin "nginx">
  URL "http://127.0.0.1:8999/stats/nginx"
</Plugin>
{% endif %}

{% if ansible_hostname is match('mixer\d+')  %}
<Plugin snmp>
  <Data "if_traffic">
    Type "if_octets"
    Table true
    Instance "IF-MIB::ifDescr"
    Values "IF-MIB::ifInOctets" "IF-MIB::ifOutOctets"
  </Data>

  <Data "if_speed">
    Type "links"
    Table true
    Instance "IF-MIB::ifDescr"
    Values "IF-MIB::ifSpeed"
  </Data>


  <Host "roomswitch{{ room_number  }}">
    Address "10.73.{{ room_number }}.200"
    Version 1
    Community "public"
    Collect "if_traffic" "if_speed"
    Interval 120
  </Host>
</Plugin>
{% endif %}
