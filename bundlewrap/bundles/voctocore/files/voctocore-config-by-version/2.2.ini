[mix]
videocaps=video/x-raw,format=I420,width=1920,height=1080,framerate=25/1,pixel-aspect-ratio=1/1,interlace-mode=progressive,colorimetry=bt709
audiocaps=audio/x-raw,format=S16LE,channels=8,layout=interleaved,rate=48000

sources=${','.join(sorted(sources.keys()))}
% if 'slides' in sources:
livesources=slides
% endif
backgrounds=bg_lec,bg_lecm,bg_sbs,bg_fs

% for sname, sconfig in sorted(sources.items()):
[source.${sname}]
%  if sconfig.get('kind', 'decklink') == 'decklink':
kind=decklink
devicenumber=${sconfig['devicenumber']}
video_connection=${'HDMI' if sconfig.get('hdmi', False) else 'SDI'}
video_mode=${sconfig['mode']}
%   if 'i' in sconfig['mode']:
scan=${sconfig.get('scan', 'psf')}
%   endif
%  else:
%   for k, v in sorted(sconfig.items()):
%    if k not in ('volume',):
${k}=${v}
%    endif
%   endfor
%  endif
volume=${sconfig.get('volume', '0.0')}
%  for aname, aconfig in audio.items():
%   if aconfig['input'] == sname:
audio.${aname} = ${aconfig['streams']}
%   endif
%  endfor

% endfor
[source.bg_lec]
kind=file
location=/opt/voc/share/bg_lec.png
composites=lec

[source.bg_lecm]
kind=file
location=/opt/voc/share/bg_lecm.png
composites=|lec

[source.bg_sbs]
kind=file
location=/opt/voc/share/bg_sbs.png
composites=sbs,|sbs

[source.bg_fs]
kind=test
pattern=black
composites=fs

[previews]
; disable if ui & server run on the same computer and can exchange uncompressed video frames
enabled=true
live=true
% if vaapi_enabled:
videodecoder=vaapi
videoencoder=vaapi
videocodec=h264
videocaps=video/x-h264,width=1024,height=576,framerate=25/1
% else:
videodecoder=cpu
videoencoder=cpu
videocodec=jpeg
videocaps=image/jpeg,width=1024,height=576,framerate=25/1
% endif

[blinder]
enabled=true
videos=break

[source.blinder]
% for aname, aconfig in sorted(audio.items()):
audio.${aname} = ${aconfig['streams']}
% endfor
kind=file
location=/opt/voc/share/pause-music.mp3

[source.break]
% for k, v in sorted(blinder.items()):
${k}=${v}
% endfor

[overlay]
path=/opt/voc/overlays
% if has_schedule:
; read user selection from schedule.json file
schedule=/opt/voc/schedule.json
; filter by room
room=${room_name}
% else:
files = ${','.join(overlay_mapping)}
% endif
; should the user be able to toggle the AUTO-OFF button?
user-auto-off = true
; should the AUTO-OFF button be initially be off?
auto-off = true
; set fading time when showing or hiding overlay
blend-time=300

[mirrors]
; disable if not needed
enabled = true

[composites]
; fullscreen source A (B is full transparent)
fs.a                  = *
fs.b                  = *
fs.alpha-b            = 0
fs.noswap             = true

; fullscreen source A (facing picture-in-picture)
fs-pip.a              = *
fs-pip.b              = 0.86/0.85 0.0
fs-pip.alpha-b        = 0
fs-pip.inter          = true
fs-pip.mirror         = true

; fullscreen source A (facing side-by-side)
fs-sbs.a              = *
fs-sbs.b              = 1.0/0.5 0.0
fs-sbs.alpha-b        = 0
fs-sbs.inter          = true

; fullscreen source A (facing side-by-side-preview)
fs-lec.a             = *
fs-lec.b             = 1.0 0.0
fs-lec.alpha-b       = 0
fs-lec.crop-b        = 0.31/0
fs-lec.inter         = true
fs-lec.mirror        = true

; picture-in-picture (fullscreen source A with B as small overlay)
pip.a                   = *
pip.b                   = 0.73/0.72 0.26
pip.noswap              = true
pip.mirror              = true

; side-by-side (source A at left and B at right side)
% if mirror_view:
sbs.a                  = 0.503/0.08 0.49
sbs.b                  = 0.008/0.42 0.49
sbs.mirror             = true
% else:
sbs.a                  = 0.008/0.08 0.49
sbs.b                  = 0.503/0.42 0.49
% endif

; side-by-side-preview (source A bigger and B smaller and cropped beside)
% if mirror_view:
lec.a                  = 0.244/0.01 0.75
lec.b                  = -0.16/0.42 0.56
% else:
lec.a                  = 0.006/0.01 0.75
lec.b                  = 0.60/0.42 0.56
% endif
lec.crop-b             = 0.31/0
lec.mirror             = true

; side-by-side-preview (source A bigger and B smaller and cropped beside)
% if mirror_view:
lec_43.a               = 0.125/0.0 1.0
lec_43.b               = -0.16/0.42 0.56
% else:
lec_43.a               = -0.125/0.0 1.0
lec_43.b               = 0.60/0.42 0.56
% endif
lec_43.crop-a          = 0.125/0
lec_43.crop-b          = 0.31/0
lec_43.mirror          = true

; fullscreen source B (overlapping A)
fs-b.a                  = *
fs-b.b                  = *
fs-b.noswap             = true

; fullscreen source B (facing side-by-side)
fs-b-sbs.a              = 0.0/0.5 0.0
fs-b-sbs.alpha-a        = 0.0
fs-b-sbs.b              = *
fs-b-sbs.inter          = true

; fullscreen source B (facing side-by-side-preview)
fs-b-lec.a             = 0.0/1.0 0.0
fs-b-lec.b             = *
fs-b-lec.inter         = true
fs-b-lec.mirror        = true

; one-opon-the-other (like one-opon-the-other but overlapping)
oao.a                   = 0.3/0.2 0.4
oao.alpha-a             = 0.5
oao.b                   = 0.2/0.3 0.6
oao.inter               = true
oao.noswap              = true

[transitions]
; list of transitions each one can be freely named and is a list of composites
; which will be morphed into an animation. Interpolation will be linear with two
; composites and B-Splines for more.

; unique name           =   ms, from / [... /] to
fs-fs                   = 750, fs / fs-b
fs-pip                  = 750, fs-pip / pip
fs-sbs                  = 750, fs-sbs / sbs
fs-b-pip                = 750, fs-b / pip
fs-b-sbs                = 750, fs-b-sbs / sbs
fs-lec                  = 750, fs-lec / lec
fs-b-lec                = 750, fs-b-lec / lec
fs-lec_43               = 750, fs-lec / lec_43
fs-b-lec_43             = 750, fs-b-lec / lec_43
pip-pip                 = 750, pip / sbs / pip
sbs-sbs                 = 750, sbs / oao / sbs
_sbs-sbs                = 750, ^sbs / ^oao / sbs

fs-pip_                 = 750, |fs-pip / |pip
fs-b-pip_               = 750, fs-b / |pip
fs-lec_                 = 750, fs-lec / |lec
fs-lec_43_              = 750, fs-lec / |lec_43
fs-b-lec_               = 750, fs-b-lec / |lec
fs-b-lec_43_            = 750, fs-b-lec / |lec_43
pip-pip_                = 750, |pip / sbs / |pip

; default blending
; unique name                       =   ms, from / [... /] to
def                     = 750, * / *

[toolbar]
; only evaluated in voctogui, but having it here means we don't have
; to configure two systems if we change configs.
fullscreen = false
ports = false
queues = false
presets = ${','.join(presets.keys())}
% for preset_name, preset_config in presets.items():

[preset.${preset_name}]
%  for k,v in sorted(preset_config.items()):
${k}=${v}
%  endfor
% endfor

[toolbar.sources.a]
buttons=${','.join(sorted(sources.keys()))}

% for sname in sorted(sources):
%  if sname in keyboard_shortcuts:
${sname}.name = ${sname}
${sname}.key = ${keyboard_shortcuts[sname][0]}
${sname}.tip = Select source ${sname} on channel A

%  endif
% endfor
[toolbar.sources.b]
buttons=${','.join(sorted(sources.keys()))}

% for sname in sorted(sources):
%  if sname in keyboard_shortcuts:
${sname}.name = ${sname}
${sname}.key = ${keyboard_shortcuts[sname][1]}
${sname}.tip = Select source ${sname} on channel B

%  endif
% endfor
[toolbar.composites]
buttons = fs,sbs,lec

fs.name = FULL SCREEN
fs.key = ${keyboard_shortcuts['scene_fs'][0]}
fs.tip = Show channel A on full screen
fs.icon = speaker.svg

sbs.name = SIDE BY SIDE
sbs.key = ${keyboard_shortcuts['scene_sbs'][0]}
sbs.tip = Put channel A beside channel B
sbs.icon = side-by-side.svg

lec.name = LECTURE
lec.key = ${keyboard_shortcuts['scene_lec'][0]}
lec.tip = Put cropped channel B beside large channel A
lec.icon = side-by-side-preview.svg

[toolbar.mods]
buttons = mirror,ratio

mirror.name = MIRROR
mirror.key = ${keyboard_shortcuts['feature_mirror'][0]}
mirror.replace = lec->|lec
mirror.tip = Horizontally mirror composite\n(e.g. when speaker moves to the other side)

ratio.name = 4:3
ratio.replace = lec->lec_43
ratio.key = ${keyboard_shortcuts['feature_43'][0]}
ratio.tip = Crop channel A to 4:3 ratio

[toolbar.mix]
buttons = retake,cut,trans

retake.name   = RETAKE
retake.key    = BackSpace
retake.tip    = Copy output composite to preview for modification\n(output remains untouched)
retake.icon   = retake.svg
cut.name      = CUT
cut.key       = Return
cut.tip       = Hard cut preview composite to output.
cut.expand    = True
cut.icon      = cut.svg

trans.name    = TRANS
trans.key     = space
trans.tip     = Use transition to cut preview composite to output
trans.expand  = True
trans.icon    = transition.svg

[toolbar.insert]
auto-off.name = AUTO-OFF
auto-off.key  = o
auto-off.tip  = automatically turn off insertion before every mix

update.name   = UPDATE
update.key    = u
update.tip    = Update current event

insert.name   = INSERT
insert.key    = i
insert.tip    = Show or hide current insertion
